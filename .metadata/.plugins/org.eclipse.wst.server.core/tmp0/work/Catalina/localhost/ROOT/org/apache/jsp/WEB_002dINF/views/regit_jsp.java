/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.60
 * Generated at: 2020-12-02 07:06:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class regit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>eMoney Web 실습</title>\r\n");
      out.write("<script src=\"/resources/js/jquery-1.12.4.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/webPrac.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/regit.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- wrapper -->\r\n");
      out.write("\t<div id=\"wrap\">\r\n");
      out.write("\t\t<!-- header -->\r\n");
      out.write("\t\t<div id=\"header\">\r\n");
      out.write("\t\t\t<!-- header top menu -->\r\n");
      out.write("\t\t\t<div id=\"topTab\">\r\n");
      out.write("\t\t\t\t<div id=\"topTabInner\">\r\n");
      out.write("\t\t\t\t\t<span>로그인</span> <span>회원가입</span>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- header menu -->\r\n");
      out.write("\t\t\t<div id=\"category\">\r\n");
      out.write("\t\t\t\t<img id=\"emoneyLogo\"\r\n");
      out.write("\t\t\t\t\tsrc=\"https://pds.saramin.co.kr/company/logo/201902/26/pnj7pp_2uf9-0_logo.jpg\"\r\n");
      out.write("\t\t\t\t\talt=\"\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 여기부터 본문 복사 -->\r\n");
      out.write("\t\t<div id=\"container\">\r\n");
      out.write("\t\t\t<div id=\"cont_inner\">\r\n");
      out.write("\t\t\t\t<h2>회원가입</h2>\r\n");
      out.write("\t\t\t\t<div id=\"infobox\">\r\n");
      out.write("\t\t\t\t\t<form id=\"accntRegit\" action=\"/register.submit.do\" method=\"POST\">\r\n");
      out.write("\t\t\t\t\t\t<table id=\"infoTbl\">\r\n");
      out.write("\t\t\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<th>아이디 <em>*</em></th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<div style=\"display: flex; width: 720px;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"idinput\" name=\"id\"> <img\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"//img.x1.co.kr/x1/images/btn/btn_duplication.gif\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tid=\"duplicheck\"> <span class=\"iddupliment\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tid=\"idduplino\">4자이상 12자이하 영문,숫자(띄어쓰기, 특수문자 불가)<span\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tstyle=\"color: red;\"> 중복확인을 해주세요</span></span> <span\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tclass=\"iddupliment\" id=\"iddupliok\">사용가능합니다.</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<th>비밀번호 <em>*</em></th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><input type=\"password\" id=\"pwinput\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname=\"s_passwd\"> <span class=\"pwdment\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"pwduplino\">영어 대/소문자, 숫자, 특수문자 중 2가지 이상 조합\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t6자~12자(띄어쓰기 불가)</span> <span class=\"pwdment\" id=\"pwdupliok\">사용가능합니다.</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<th>비밀번호 확인 <em>*</em></th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><input type=\"password\" id=\"pwreinput\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<th>성명 <em>*</em></th>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><input type=\"text\" id=\"nameinput\" name=\"name\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t</tbody>\r\n");
      out.write("\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t<!-- submit btn -->\r\n");
      out.write("\t\t\t\t\t<div id=\"submitdiv\">\r\n");
      out.write("\t\t\t\t\t\t<img id=\"cancelbtn\" src=\"//img.x1.co.kr/x1/images/btn/btn_cancel.gif\"> \r\n");
      out.write("\t\t\t\t\t\t<img id=\"submitbtn\" src=\"//img.x1.co.kr/x1/images/btn/btn_confirm.gif\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- 여기까지 -->\r\n");
      out.write("\t\t<div id=\"footer\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write(" \tvar regitFlag = [ false, false, false, false, false ];\r\n");
      out.write("    var regitMent = [\"아이디 형식이 올바르지 않습니다\",\r\n");
      out.write("        \"아이디 중복검사를 실시해주세요\",\r\n");
      out.write("        \"비밀번호 형식이 올바르지 않습니다\",\r\n");
      out.write("        \"비밀번호가 서로 일치하지않습니다\",\r\n");
      out.write("        \"성명 형식이 올바르지 않습니다\"]\r\n");
      out.write("\t// ID 값 정규식\r\n");
      out.write("\tvar idReg = /^[A-Za-z0-9]{4,12}$/;\r\n");
      out.write("\r\n");
      out.write("\t// ID 중복확인시 정규식 체크\r\n");
      out.write("\t$(\"#idinput\").keyup(function() {\r\n");
      out.write("\t\t// 입력값이 변경되면 중복검사를 다시 진행해야하기 때문에 무조건 중복확인을 false로 변경\r\n");
      out.write("\t\tregitFlag[1] = false;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 정규식 일치 여부 확인\r\n");
      out.write("\t\tif (idReg.test($(\"#idinput\").val())) {\r\n");
      out.write("\t\t\tregitFlag[0] = true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tregitFlag[0] = false;\r\n");
      out.write("\t\t}\r\n");
      out.write(" \t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#duplicheck\").click(function() {\r\n");
      out.write("\t\t// 아이디 입력값이 맞는 경우만\r\n");
      out.write("\t\tif(regitFlag[0]){\r\n");
      out.write("\t\t\t// 데이터베이스에 존재하는지 확인\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\ttype : \"POST\",\r\n");
      out.write("\t\t\t\turl : \"register.idcheck.do\",\r\n");
      out.write("\t\t\t\tdata : {\r\n");
      out.write("\t\t\t\t\t\"idinput\" : $(\"#idinput\").val()\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tdataType : \"text\",\r\n");
      out.write("\t\t\t\tsuccess : function(result) {\r\n");
      out.write("\t\t\t\t\t// 성공시\r\n");
      out.write("\t\t\t\t\tif (result != \"duplicated\") {\r\n");
      out.write("\t\t\t\t\t\talert(\"사용 가능합니다\");\r\n");
      out.write("\t\t\t\t\t\tregitFlag[1] = true;\r\n");
      out.write("\t\t\t\t\t\t$(\"#idduplino\").hide();\r\n");
      out.write("\t\t\t\t\t\t$(\"#iddupliok\").show();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// 실패시 \r\n");
      out.write("\t\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\t\talert(\"중복된 아이디입니다\");\r\n");
      out.write("\t\t\t\t\t\tregitFlag[1] = false;\r\n");
      out.write("\t\t\t\t\t\t$(\"#iddupliok\").hide();\r\n");
      out.write("\t\t\t\t\t\t$(\"#idduplino\").show();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror : function(a, b, c) {\r\n");
      out.write("\t\t\t\t\tconsole.log(a, b, c);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\talert(regitMent[0]);\r\n");
      out.write("\t\t\tregitFlag[0] = false;\r\n");
      out.write("\t\t\t$(\"#iddupliok\").hide();\r\n");
      out.write("\t\t\t$(\"#idduplino\").show();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// PW 값 정규식\r\n");
      out.write("\tvar pwReg_eng_num = /^(?=.*[a-zA-Z])(?=.*[0-9]).{6,12}$/;\r\n");
      out.write("\tvar pwReg_eng_spe = /^(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{6,12}$/;\r\n");
      out.write("\tvar pwReg_sep_num = /^(?=.*[^a-zA-Z0-9])(?=.*[0-9]).{6,12}$/;\r\n");
      out.write("\r\n");
      out.write("\t// PW 입력 시 정규식 체크\r\n");
      out.write("\t$(\"#pwinput\").keyup(\r\n");
      out.write("\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t// PW 입력값\r\n");
      out.write("\t\t\t\tvar pwInput = $(\"#pwinput\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// 영어 대/소문자, 숫자, 특수문자 중 2가지 이상 조합 6자~12자\r\n");
      out.write("\t\t\t\tif (pwReg_eng_num.test(pwInput) || pwReg_eng_spe.test(pwInput)\r\n");
      out.write("\t\t\t\t\t\t|| pwReg_sep_num.test(pwInput)) {\r\n");
      out.write("\t\t\t\t\t// 해당 조건 만족 시에 공백 검사\r\n");
      out.write("\t\t\t\t\tif (pwInput.search(/\\s/) == -1) {\r\n");
      out.write("\t\t\t\t\t\t$(\"#pwduplino\").hide();\r\n");
      out.write("\t\t\t\t\t\t$(\"#pwdupliok\").show();\r\n");
      out.write("\t\t\t\t\t\tregitFlag[2] = true;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t$(\"#pwdupliok\").hide();\r\n");
      out.write("\t\t\t\t\t\t$(\"#pwduplino\").show();\r\n");
      out.write("\t\t\t\t\t\tregitFlag[2] = false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t$(\"#pwdupliok\").hide();\r\n");
      out.write("\t\t\t\t\t$(\"#pwduplino\").show();\r\n");
      out.write("\t\t\t\t\tregitFlag[2] = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t// PW 중복 체크 \r\n");
      out.write("\t$(\"#pwreinput\").keyup(function() {\r\n");
      out.write("\t\tif ($(\"#pwinput\").val() == $(\"#pwreinput\").val()) {\r\n");
      out.write("\t\t\tregitFlag[3] = true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tregitFlag[3] = false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("\r\n");
      out.write("\t// 성명 한글 체크\r\n");
      out.write("\tvar nameReg = /^[가-힣]*$/;\r\n");
      out.write("\t$(\"#nameinput\").keyup(function() {\r\n");
      out.write("\t\tif (nameReg.test($(\"#nameinput\").val())) {\r\n");
      out.write("\t\t\tregitFlag[4] = true;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tregitFlag[4] = false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 전송 시 항목별 체크\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#submitbtn\").click(function(){\r\n");
      out.write("\t\tvar tempFlag = true;\r\n");
      out.write("\t\tfor(var i=0; i<regitFlag.length; i++){\r\n");
      out.write("            if(regitFlag[i] == false){\r\n");
      out.write("                alert(regitMent[i]);\r\n");
      out.write("                tempFlag = false;\r\n");
      out.write("                break;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\t\tif(tempFlag){\r\n");
      out.write("\t\t\t$(\"#accntRegit\").submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
